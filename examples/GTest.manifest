@Tag 1

#include <iostream>
#include <cstdlib>

int main()
{
    std::cout<<"Hello World\n";
    return EXIT_SUCCESS;
}

@Tag 2
project(HelloWorld)
cmake_minimum_required(VERSION 3.20)
# Here we set the C++ standard to use
set(CMAKE_CXX_STANDARD 17)
include_directories(include)
add_executable(HelloWorld src/main.cpp)

@Tag 3
#include "Vec3.h"


@Tag 4

#ifndef VEC3_H_
#define VEC3_H_

#endif

@Tag 5 


#include <gtest/gtest.h>
#include "Vec3.h"
TEST(VEC3,ctor)
{
EXPECT_TRUE(1 == 0);
}

@Tag 6

cmake_minimum_required(VERSION 3.2)

if(NOT DEFINED CMAKE_TOOLCHAIN_FILE AND DEFINED ENV{CMAKE_TOOLCHAIN_FILE})
   set(CMAKE_TOOLCHAIN_FILE $ENV{CMAKE_TOOLCHAIN_FILE})
endif()

project(Vec3)
cmake_minimum_required(VERSION 3.20)
# Here we set the C++ standard to use
set(CMAKE_CXX_STANDARD 17)
include_directories(include)
add_executable(Vec3)
target_sources(Vec3 PRIVATE src/main.cpp src/Vec3.cpp include/Vec3.h)
find_package(GTest CONFIG REQUIRED)
include(GoogleTest)
enable_testing()
add_executable(Vec3Tests)
target_sources(Vec3Tests PRIVATE tests/TestVec3.cpp src/Vec3.cpp include/Vec3.h)
target_link_libraries(Vec3Tests PRIVATE GTest::gtest GTest::gtest_main)
gtest_discover_tests(Vec3Tests)

@Tag 7
build/*

@Tag 8

#ifndef VEC3_H_
#define VEC3_H_
class Vec3
{
    public :
    Vec3()=default;
    Vec3(float x,float y,float z);
    Vec3 operator+(const Vec3& rhs);
    Vec3 operator-(const Vec3& rhs);
    Vec3 operator*(const Vec3& rhs);
    Vec3 operator/(const Vec3& rhs);
    Vec3 operator+=(const Vec3& rhs);
    Vec3 operator-=(const Vec3& rhs);
    Vec3 operator*=(const Vec3& rhs);
    Vec3 operator/=(const Vec3& rhs);
    bool operator==(const Vec3& rhs);
    bool operator!=(const Vec3& rhs);

    float m_x=0.0f;
    float m_y=0.0f;
    float m_z=0.0f;

};
#endif

@Tag 9

#include <gtest/gtest.h>
#include "Vec3.h"
TEST(Vec3,ctor)
{
    Vec3 v;
    EXPECT_FLOAT_EQ(v.m_x,0.0f);
    EXPECT_FLOAT_EQ(v.m_y,0.0f);
    EXPECT_FLOAT_EQ(v.m_z,0.0f);
}


@Tag 10

TEST(Vec3,userctor)
{
    Vec3 v(1.0f,2.0f,3.0f);
    EXPECT_FLOAT_EQ(v.m_x,1.0f);
    EXPECT_FLOAT_EQ(v.m_y,2.0f);
    EXPECT_FLOAT_EQ(v.m_z,3.0f);
}

@Tag 11

Vec3::Vec3(float x,float y,float z) : m_x(x),m_y(y),m_z(z)
{
}

@Tag 12

TEST(Vec3,add)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    Vec3 v3=v1+v2;
    EXPECT_FLOAT_EQ(v3.m_x,2.0f);
    EXPECT_FLOAT_EQ(v3.m_y,4.0f);
    EXPECT_FLOAT_EQ(v3.m_z,6.0f);
}

@Tag 13

Vec3 Vec3::operator+(const Vec3& rhs)
{
    return Vec3(m_x+rhs.m_x,m_y+rhs.m_y,m_z+rhs.m_z);
}

@Tag 14

TEST(Vec3,sub)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    Vec3 v3=v1-v2;
    EXPECT_FLOAT_EQ(v3.m_x,0.0f);
    EXPECT_FLOAT_EQ(v3.m_y,0.0f);
    EXPECT_FLOAT_EQ(v3.m_z,0.0f);
}

@Tag 15

Vec3 Vec3::operator-(const Vec3& rhs)
{
    return Vec3(m_x-rhs.m_x,m_y-rhs.m_y,m_z-rhs.m_z);
}

@Tag 16
TEST(Vec3,mul)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    Vec3 v3=v1*v2;
    EXPECT_FLOAT_EQ(v3.m_x,1.0f);
    EXPECT_FLOAT_EQ(v3.m_y,4.0f);
    EXPECT_FLOAT_EQ(v3.m_z,9.0f);
}

@Tag 17
Vec3 Vec3::operator*(const Vec3& rhs)
{
    return Vec3(m_x*rhs.m_x,m_y*rhs.m_y,m_z*rhs.m_z);
}

@Tag 18
TEST(Vec3,div)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    Vec3 v3=v1/v2;
    EXPECT_FLOAT_EQ(v3.m_x,1.0f);
    EXPECT_FLOAT_EQ(v3.m_y,1.0f);
    EXPECT_FLOAT_EQ(v3.m_z,1.0f);
}

@Tag 19
Vec3 Vec3::operator/(const Vec3& rhs)
{
    return Vec3(m_x/rhs.m_x,m_y/rhs.m_y,m_z/rhs.m_z);
}

@Tag 20
TEST(Vec3,addassign)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    v1+=v2;
    EXPECT_FLOAT_EQ(v1.m_x,2.0f);
    EXPECT_FLOAT_EQ(v1.m_y,4.0f);
    EXPECT_FLOAT_EQ(v1.m_z,6.0f);
}

@Tag 21
Vec3 Vec3::operator+=(const Vec3& rhs)
{
    m_x+=rhs.m_x;
    m_y+=rhs.m_y;
    m_z+=rhs.m_z;
    return *this;
}

@Tag 22
TEST(Vec3,subassign)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    v1-=v2;
    EXPECT_FLOAT_EQ(v1.m_x,0.0f);
    EXPECT_FLOAT_EQ(v1.m_y,0.0f);
    EXPECT_FLOAT_EQ(v1.m_z,0.0f);
}

@Tag 23
Vec3 Vec3::operator-=(const Vec3& rhs)
{
    m_x-=rhs.m_x;
    m_y-=rhs.m_y;
    m_z-=rhs.m_z;
    return *this;
}

@Tag 24
TEST(Vec3,mulassign)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    v1*=v2;
    EXPECT_FLOAT_EQ(v1.m_x,1.0f);
    EXPECT_FLOAT_EQ(v1.m_y,4.0f);
    EXPECT_FLOAT_EQ(v1.m_z,9.0f);
}

@Tag 25

Vec3 Vec3::operator*=(const Vec3& rhs)
{
    m_x*=rhs.m_x;
    m_y*=rhs.m_y;
    m_z*=rhs.m_z;
    return *this;
}

@Tag 26
TEST(Vec3,divassign)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    v1/=v2;
    EXPECT_FLOAT_EQ(v1.m_x,1.0f);
    EXPECT_FLOAT_EQ(v1.m_y,1.0f);
    EXPECT_FLOAT_EQ(v1.m_z,1.0f);
}

@Tag 27
Vec3 Vec3::operator/=(const Vec3& rhs)
{
    m_x/=rhs.m_x;
    m_y/=rhs.m_y;
    m_z/=rhs.m_z;
    return *this;
}

@Tag 28
TEST(Vec3,equal)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(1.0f,2.0f,3.0f);
    EXPECT_TRUE(v1==v2);
}

@Tag 29
bool Vec3::operator==(const Vec3& rhs)
{
    return (m_x==rhs.m_x && m_y==rhs.m_y && m_z==rhs.m_z);
}

@Tag 30
TEST(Vec3,notequal)
{
    Vec3 v1(1.0f,2.0f,3.0f);
    Vec3 v2(2.0f,2.0f,3.0f);
    EXPECT_TRUE(v1!=v2);
}

@Tag 31
bool Vec3::operator!=(const Vec3& rhs)
{
    return (m_x!=rhs.m_x || m_y!=rhs.m_y || m_z!=rhs.m_z);
}

@Tag END
